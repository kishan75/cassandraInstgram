
CREATE TABLE instagramdemo.user (
    userid timeuuid PRIMARY KEY,
    atdeleted timestamp,
    dob date,
    email text,
    firstname text,
    followers set<timeuuid>,
    following set<timeuuid>,
    lastname text,
    messages map<timeuuid,time>,
    myactivity set<timeuuid>,
    notifications set<timeuuid>,
    phone text,
    post set<timeuuid>,
    postnotification map<timeuuid, date>,
    registrationdate date,
    username text
)

CREATE TABLE instagramdemo.user (
    userid timeuuid PRIMARY KEY,
    atdeleted timestamp,
    dob date,
    email text,
    firstname text,
    lastname text,
    phone text,
    time timestamp,
    username text
);

CREATE TABLE post_count (
  userid timeuuid PRIMARY KEY,
  post_count counter
  );


CREATE TABLE comment(
commentid timeuuid PRIMARY KEY,	
postid timeuuid,
userid timeuuid,
time timestamp,
comment text,
replies set<timeuuid>,
like set<timeuuid>
);

CREATE TABLE instagramdemo.post (
    postid timeuuid ,
    userid timeuuid,
    caption text,
    imagepath text,
    time timestamp,
PRIMARY KEY (userid,time)
) WITH CLUSTERING ORDER BY (time ASC);


CREATE TABLE IF NOT EXISTS myactivity(
activityid timeuuid PRIMARY KEY,
byuser timeuuid,
ofuser timeuuid,
activitytype int,
activityobjectid timeuuid,
time timestamp
);

CREATE TABLE IF NOT EXISTS message(
messageid timeuuid,
byuser timeuuid,
touser timeuuid,
type text,   // reply or
body text,
time timestamp,
PRIMARY KEY ((byuser,touser),time)
) WITH CLUSTERING ORDER BY (time ASC);



CREATE TABLE IF NOT EXISTS notificationtype(
message text PRIMARY KEY,
id int
);

CREATE TABLE IF NOT EXISTS notification(
notificationid timeuuid PRIMARY KEY,
fromuser timeuuid,
touser timeuuid,
type int,
notificationobjectid timeuuid,
time timestamp
);

CREATE TABLE test ( from text,
to text, 
id timeuuid ,
PRIMARY KEY((from,to),id) 
);

CREATE TABLE IF NOT EXISTS reply(
replyid timeuuid PRIMARY KEY,	
commentid timeuuid,	
postid timeuuid,
userid  timeuuid,
time timestamp,
reply text,
like set<timeuuid>
);


export const UserFeed = models.loadSchema('UserFeed', {
    fields: {
        fight_id: { type: 'uuid' },
        match_id: { type: 'uuid' },
        match_scheduled_date: { type: "date" }, // date
        user_id: { type: 'uuid' }, // nullable models.datatypes.unset
        type: 'varchar',
        priority: 'int',
        side_a_id: { type: 'uuid' },
        side_b_id: { type: 'uuid' },
        created: {
            type: "timestamp",
            default: { "$db_function": "toTimestamp(now())" }
        }
    },
    key: ["fight_id"]
})





create table matchdetails (
matchid uuid,
matchscheduleddate timestamp,
created timestamp,
PRIMARY KEY (matchscheduleddate)
)
WITH CLUSTERING ORDER BY (matchscheduleddate ASC);

export const MatchDetails = models.loadSchema('MatchDetails', {
fields: {
match_id: { type: 'varchar' },
match_scheduled_date: { type: "timestamp" }, // date
created: { type: "timestamp" }
},
key: ["match_scheduled_date"]
})
